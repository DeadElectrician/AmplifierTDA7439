
AmplifierTDA7439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002608  08002608  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002608  08002608  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002608  08002608  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000010  08002620  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002620  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ba9  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a2  00000000  00000000  00028be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0002a488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013431  00000000  00000000  0002b640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080f6  00000000  00000000  0003ea71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000685ab  00000000  00000000  00046b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024ac  00000000  00000000  000af190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080025c4 	.word	0x080025c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080025c4 	.word	0x080025c4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f94a 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042e:	e127      	b.n	8000680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000430:	2201      	movs	r2, #1
 8000432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	429a      	cmp	r2, r3
 800044a:	f040 8116 	bne.w	800067a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b12      	cmp	r3, #18
 8000454:	d034      	beq.n	80004c0 <HAL_GPIO_Init+0xa4>
 8000456:	2b12      	cmp	r3, #18
 8000458:	d80d      	bhi.n	8000476 <HAL_GPIO_Init+0x5a>
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02b      	beq.n	80004b6 <HAL_GPIO_Init+0x9a>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d804      	bhi.n	800046c <HAL_GPIO_Init+0x50>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d01c      	beq.n	80004a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800046a:	e048      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800046c:	2b03      	cmp	r3, #3
 800046e:	d043      	beq.n	80004f8 <HAL_GPIO_Init+0xdc>
 8000470:	2b11      	cmp	r3, #17
 8000472:	d01b      	beq.n	80004ac <HAL_GPIO_Init+0x90>
          break;
 8000474:	e043      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000476:	4a89      	ldr	r2, [pc, #548]	; (800069c <HAL_GPIO_Init+0x280>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d026      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800047c:	4a87      	ldr	r2, [pc, #540]	; (800069c <HAL_GPIO_Init+0x280>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d806      	bhi.n	8000490 <HAL_GPIO_Init+0x74>
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x284>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d020      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000488:	4a86      	ldr	r2, [pc, #536]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 800048e:	e036      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000490:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000496:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x290>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d016      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800049c:	4a84      	ldr	r2, [pc, #528]	; (80006b0 <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d013      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e02c      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	623b      	str	r3, [r7, #32]
          break;
 80004aa:	e028      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3304      	adds	r3, #4
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	e023      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	3308      	adds	r3, #8
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e01e      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	330c      	adds	r3, #12
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e019      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2304      	movs	r3, #4
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e012      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d105      	bne.n	80004ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e0:	2308      	movs	r3, #8
 80004e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	611a      	str	r2, [r3, #16]
          break;
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	615a      	str	r2, [r3, #20]
          break;
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d801      	bhi.n	8000508 <HAL_GPIO_Init+0xec>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	e001      	b.n	800050c <HAL_GPIO_Init+0xf0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3304      	adds	r3, #4
 800050c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d802      	bhi.n	800051a <HAL_GPIO_Init+0xfe>
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	e002      	b.n	8000520 <HAL_GPIO_Init+0x104>
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	3b08      	subs	r3, #8
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	210f      	movs	r1, #15
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8096 	beq.w	800067a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b59      	ldr	r3, [pc, #356]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <HAL_GPIO_Init+0x298>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000566:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x19a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x196>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x192>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e006      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e004      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e002      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ba:	2300      	movs	r3, #0
 80005bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005be:	f002 0203 	and.w	r2, r2, #3
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4093      	lsls	r3, r2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005cc:	493a      	ldr	r1, [pc, #232]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	089b      	lsrs	r3, r3, #2
 80005d2:	3302      	adds	r3, #2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e006      	b.n	8000602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005fe:	4013      	ands	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
 800061a:	e006      	b.n	800062a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	43db      	mvns	r3, r3
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000626:	4013      	ands	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
 8000642:	e006      	b.n	8000652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	43db      	mvns	r3, r3
 800064c:	491f      	ldr	r1, [pc, #124]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800064e:	4013      	ands	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	491a      	ldr	r1, [pc, #104]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	3301      	adds	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f47f aed0 	bne.w	8000430 <HAL_GPIO_Init+0x14>
  }
}
 8000690:	bf00      	nop
 8000692:	372c      	adds	r7, #44	; 0x2c
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	10210000 	.word	0x10210000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	10120000 	.word	0x10120000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10220000 	.word	0x10220000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40011400 	.word	0x40011400
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006ec:	e003      	b.n	80006f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	041a      	lsls	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	611a      	str	r2, [r3, #16]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68da      	ldr	r2, [r3, #12]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000718:	887a      	ldrh	r2, [r7, #2]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800071e:	e002      	b.n	8000726 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	611a      	str	r2, [r3, #16]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e10f      	b.n	8000962 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d106      	bne.n	800075c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f001 fcdc 	bl	8002114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2224      	movs	r2, #36	; 0x24
 8000760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0201 	bic.w	r2, r2, #1
 8000772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000774:	f000 ffd4 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 8000778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a7b      	ldr	r2, [pc, #492]	; (800096c <HAL_I2C_Init+0x23c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d807      	bhi.n	8000794 <HAL_I2C_Init+0x64>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <HAL_I2C_Init+0x240>)
 8000788:	4293      	cmp	r3, r2
 800078a:	bf94      	ite	ls
 800078c:	2301      	movls	r3, #1
 800078e:	2300      	movhi	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	e006      	b.n	80007a2 <HAL_I2C_Init+0x72>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4a77      	ldr	r2, [pc, #476]	; (8000974 <HAL_I2C_Init+0x244>)
 8000798:	4293      	cmp	r3, r2
 800079a:	bf94      	ite	ls
 800079c:	2301      	movls	r3, #1
 800079e:	2300      	movhi	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0db      	b.n	8000962 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4a72      	ldr	r2, [pc, #456]	; (8000978 <HAL_I2C_Init+0x248>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6a1b      	ldr	r3, [r3, #32]
 80007d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a64      	ldr	r2, [pc, #400]	; (800096c <HAL_I2C_Init+0x23c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d802      	bhi.n	80007e4 <HAL_I2C_Init+0xb4>
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	e009      	b.n	80007f8 <HAL_I2C_Init+0xc8>
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <HAL_I2C_Init+0x24c>)
 80007f0:	fba2 2303 	umull	r2, r3, r2, r3
 80007f4:	099b      	lsrs	r3, r3, #6
 80007f6:	3301      	adds	r3, #1
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800080a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4956      	ldr	r1, [pc, #344]	; (800096c <HAL_I2C_Init+0x23c>)
 8000814:	428b      	cmp	r3, r1
 8000816:	d80d      	bhi.n	8000834 <HAL_I2C_Init+0x104>
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	1e59      	subs	r1, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	fbb1 f3f3 	udiv	r3, r1, r3
 8000826:	3301      	adds	r3, #1
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	2b04      	cmp	r3, #4
 800082e:	bf38      	it	cc
 8000830:	2304      	movcc	r3, #4
 8000832:	e04f      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d111      	bne.n	8000860 <HAL_I2C_Init+0x130>
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	1e58      	subs	r0, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6859      	ldr	r1, [r3, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	440b      	add	r3, r1
 800084a:	fbb0 f3f3 	udiv	r3, r0, r3
 800084e:	3301      	adds	r3, #1
 8000850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	e012      	b.n	8000886 <HAL_I2C_Init+0x156>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	1e58      	subs	r0, r3, #1
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6859      	ldr	r1, [r3, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	0099      	lsls	r1, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	fbb0 f3f3 	udiv	r3, r0, r3
 8000876:	3301      	adds	r3, #1
 8000878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_I2C_Init+0x15e>
 800088a:	2301      	movs	r3, #1
 800088c:	e022      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10e      	bne.n	80008b4 <HAL_I2C_Init+0x184>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	1e58      	subs	r0, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6859      	ldr	r1, [r3, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	440b      	add	r3, r1
 80008a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b2:	e00f      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1e58      	subs	r0, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6859      	ldr	r1, [r3, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	0099      	lsls	r1, r3, #2
 80008c4:	440b      	add	r3, r1
 80008c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ca:	3301      	adds	r3, #1
 80008cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	6809      	ldr	r1, [r1, #0]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69da      	ldr	r2, [r3, #28]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a1b      	ldr	r3, [r3, #32]
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6911      	ldr	r1, [r2, #16]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68d2      	ldr	r2, [r2, #12]
 800090e:	4311      	orrs	r1, r2
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	430b      	orrs	r3, r1
 8000916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	430a      	orrs	r2, r1
 8000932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0201 	orr.w	r2, r2, #1
 8000942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2220      	movs	r2, #32
 800094e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	000186a0 	.word	0x000186a0
 8000970:	001e847f 	.word	0x001e847f
 8000974:	003d08ff 	.word	0x003d08ff
 8000978:	431bde83 	.word	0x431bde83
 800097c:	10624dd3 	.word	0x10624dd3

08000980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	461a      	mov	r2, r3
 800098c:	460b      	mov	r3, r1
 800098e:	817b      	strh	r3, [r7, #10]
 8000990:	4613      	mov	r3, r2
 8000992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fc32 	bl	80001fc <HAL_GetTick>
 8000998:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b20      	cmp	r3, #32
 80009a4:	f040 80e0 	bne.w	8000b68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2319      	movs	r3, #25
 80009ae:	2201      	movs	r2, #1
 80009b0:	4970      	ldr	r1, [pc, #448]	; (8000b74 <HAL_I2C_Master_Transmit+0x1f4>)
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 f958 	bl	8000c68 <I2C_WaitOnFlagUntilTimeout>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80009be:	2302      	movs	r3, #2
 80009c0:	e0d3      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <HAL_I2C_Master_Transmit+0x50>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e0cc      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d007      	beq.n	80009f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f042 0201 	orr.w	r2, r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2221      	movs	r2, #33	; 0x21
 8000a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2210      	movs	r2, #16
 8000a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	893a      	ldrh	r2, [r7, #8]
 8000a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4a50      	ldr	r2, [pc, #320]	; (8000b78 <HAL_I2C_Master_Transmit+0x1f8>)
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000a38:	8979      	ldrh	r1, [r7, #10]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	6a3a      	ldr	r2, [r7, #32]
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f89c 	bl	8000b7c <I2C_MasterRequestWrite>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e08d      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000a64:	e066      	b.n	8000b34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	6a39      	ldr	r1, [r7, #32]
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f9d2 	bl	8000e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00d      	beq.n	8000a92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d107      	bne.n	8000a8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e06b      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aba:	3b01      	subs	r3, #1
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d11b      	bne.n	8000b08 <HAL_I2C_Master_Transmit+0x188>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d017      	beq.n	8000b08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	3b01      	subs	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b00:	3b01      	subs	r3, #1
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	6a39      	ldr	r1, [r7, #32]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f9c2 	bl	8000e96 <I2C_WaitOnBTFFlagUntilTimeout>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d107      	bne.n	8000b30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e01a      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d194      	bne.n	8000a66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2220      	movs	r2, #32
 8000b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e000      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000b68:	2302      	movs	r3, #2
  }
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	00100002 	.word	0x00100002
 8000b78:	ffff0000 	.word	0xffff0000

08000b7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d006      	beq.n	8000ba6 <I2C_MasterRequestWrite+0x2a>
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d003      	beq.n	8000ba6 <I2C_MasterRequestWrite+0x2a>
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000ba4:	d108      	bne.n	8000bb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e00b      	b.n	8000bd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	2b12      	cmp	r3, #18
 8000bbe:	d107      	bne.n	8000bd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f843 	bl	8000c68 <I2C_WaitOnFlagUntilTimeout>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e035      	b.n	8000c58 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bf4:	d108      	bne.n	8000c08 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000bf6:	897b      	ldrh	r3, [r7, #10]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	e01b      	b.n	8000c40 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000c08:	897b      	ldrh	r3, [r7, #10]
 8000c0a:	11db      	asrs	r3, r3, #7
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f003 0306 	and.w	r3, r3, #6
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	f063 030f 	orn	r3, r3, #15
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	490e      	ldr	r1, [pc, #56]	; (8000c60 <I2C_MasterRequestWrite+0xe4>)
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f000 f875 	bl	8000d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e010      	b.n	8000c58 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000c36:	897b      	ldrh	r3, [r7, #10]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <I2C_MasterRequestWrite+0xe8>)
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f000 f865 	bl	8000d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	00010008 	.word	0x00010008
 8000c64:	00010002 	.word	0x00010002

08000c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c78:	e025      	b.n	8000cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c80:	d021      	beq.n	8000cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c82:	f7ff fabb 	bl	80001fc <HAL_GetTick>
 8000c86:	4602      	mov	r2, r0
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d302      	bcc.n	8000c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d116      	bne.n	8000cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f043 0220 	orr.w	r2, r3, #32
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e023      	b.n	8000d0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d10d      	bne.n	8000cec <I2C_WaitOnFlagUntilTimeout+0x84>
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf0c      	ite	eq
 8000ce2:	2301      	moveq	r3, #1
 8000ce4:	2300      	movne	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	e00c      	b.n	8000d06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf0c      	ite	eq
 8000cfe:	2301      	moveq	r3, #1
 8000d00:	2300      	movne	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d0b6      	beq.n	8000c7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d24:	e051      	b.n	8000dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d34:	d123      	bne.n	8000d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2220      	movs	r2, #32
 8000d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f043 0204 	orr.w	r2, r3, #4
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e046      	b.n	8000e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d021      	beq.n	8000dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d86:	f7ff fa39 	bl	80001fc <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d302      	bcc.n	8000d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d116      	bne.n	8000dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2220      	movs	r2, #32
 8000da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f043 0220 	orr.w	r2, r3, #32
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e020      	b.n	8000e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10c      	bne.n	8000dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4013      	ands	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bf14      	ite	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	2300      	moveq	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	e00b      	b.n	8000e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	43da      	mvns	r2, r3
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d18d      	bne.n	8000d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e20:	e02d      	b.n	8000e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f000 f878 	bl	8000f18 <I2C_IsAcknowledgeFailed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e02d      	b.n	8000e8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d021      	beq.n	8000e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e3a:	f7ff f9df 	bl	80001fc <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d302      	bcc.n	8000e50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d116      	bne.n	8000e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2200      	movs	r2, #0
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f043 0220 	orr.w	r2, r3, #32
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e007      	b.n	8000e8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	2b80      	cmp	r3, #128	; 0x80
 8000e8a:	d1ca      	bne.n	8000e22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000ea2:	e02d      	b.n	8000f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 f837 	bl	8000f18 <I2C_IsAcknowledgeFailed>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e02d      	b.n	8000f10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eba:	d021      	beq.n	8000f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ebc:	f7ff f99e 	bl	80001fc <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d302      	bcc.n	8000ed2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2220      	movs	r2, #32
 8000edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f043 0220 	orr.w	r2, r3, #32
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e007      	b.n	8000f10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d1ca      	bne.n	8000ea4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2e:	d11b      	bne.n	8000f68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000f38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2220      	movs	r2, #32
 8000f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f043 0204 	orr.w	r2, r3, #4
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e26c      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8087 	beq.w	80010a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f94:	4b92      	ldr	r3, [pc, #584]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d00c      	beq.n	8000fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa0:	4b8f      	ldr	r3, [pc, #572]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d112      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x5e>
 8000fac:	4b8c      	ldr	r3, [pc, #560]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fba:	4b89      	ldr	r3, [pc, #548]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d06c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x12c>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d168      	bne.n	80010a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e246      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fda:	d106      	bne.n	8000fea <HAL_RCC_OscConfig+0x76>
 8000fdc:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a7f      	ldr	r2, [pc, #508]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e02e      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x98>
 8000ff2:	4b7b      	ldr	r3, [pc, #492]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a7a      	ldr	r2, [pc, #488]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b78      	ldr	r3, [pc, #480]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a77      	ldr	r2, [pc, #476]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0xbc>
 8001016:	4b72      	ldr	r3, [pc, #456]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a71      	ldr	r2, [pc, #452]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8001030:	4b6b      	ldr	r3, [pc, #428]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a6a      	ldr	r2, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a67      	ldr	r2, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff f8d4 	bl	80001fc <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff f8d0 	bl	80001fc <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1fa      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xe4>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff f8c0 	bl	80001fc <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff f8bc 	bl	80001fc <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1e6      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	4b53      	ldr	r3, [pc, #332]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x10c>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d11c      	bne.n	8001100 <HAL_RCC_OscConfig+0x18c>
 80010c6:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d116      	bne.n	8001100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_RCC_OscConfig+0x176>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e1ba      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4939      	ldr	r1, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	e03a      	b.n	8001176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_RCC_OscConfig+0x270>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff f875 	bl	80001fc <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff f871 	bl	80001fc <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e19b      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <HAL_RCC_OscConfig+0x270>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff f854 	bl	80001fc <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff f850 	bl	80001fc <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e17a      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d03a      	beq.n	80011f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d019      	beq.n	80011be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_RCC_OscConfig+0x274>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001190:	f7ff f834 	bl	80001fc <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff f830 	bl	80001fc <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e15a      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 fac6 	bl	8001748 <RCC_Delay>
 80011bc:	e01c      	b.n	80011f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_RCC_OscConfig+0x274>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff f81a 	bl	80001fc <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ca:	e00f      	b.n	80011ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011cc:	f7ff f816 	bl	80001fc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d908      	bls.n	80011ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e140      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	42420000 	.word	0x42420000
 80011e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ec:	4b9e      	ldr	r3, [pc, #632]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e9      	bne.n	80011cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80a6 	beq.w	8001352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120a:	4b97      	ldr	r3, [pc, #604]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10d      	bne.n	8001232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b94      	ldr	r3, [pc, #592]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a93      	ldr	r2, [pc, #588]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b91      	ldr	r3, [pc, #580]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001232:	4b8e      	ldr	r3, [pc, #568]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d118      	bne.n	8001270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123e:	4b8b      	ldr	r3, [pc, #556]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a8a      	ldr	r2, [pc, #552]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124a:	f7fe ffd7 	bl	80001fc <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001252:	f7fe ffd3 	bl	80001fc <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e0fd      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b81      	ldr	r3, [pc, #516]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x312>
 8001278:	4b7b      	ldr	r3, [pc, #492]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a7a      	ldr	r2, [pc, #488]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	e02d      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x334>
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6213      	str	r3, [r2, #32]
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	f023 0304 	bic.w	r3, r3, #4
 80012a4:	6213      	str	r3, [r2, #32]
 80012a6:	e01c      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x356>
 80012b0:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4a6c      	ldr	r2, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6213      	str	r3, [r2, #32]
 80012bc:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a69      	ldr	r2, [pc, #420]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6213      	str	r3, [r2, #32]
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 80012ca:	4b67      	ldr	r3, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a66      	ldr	r2, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6213      	str	r3, [r2, #32]
 80012d6:	4b64      	ldr	r3, [pc, #400]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a63      	ldr	r2, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d015      	beq.n	8001316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7fe ff87 	bl	80001fc <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7fe ff83 	bl	80001fc <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e0ab      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ee      	beq.n	80012f2 <HAL_RCC_OscConfig+0x37e>
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7fe ff71 	bl	80001fc <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7fe ff6d 	bl	80001fc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e095      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ee      	bne.n	800131e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d105      	bne.n	8001352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a47      	ldr	r2, [pc, #284]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8081 	beq.w	800145e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d061      	beq.n	800142c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d146      	bne.n	80013fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_RCC_OscConfig+0x4fc>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7fe ff41 	bl	80001fc <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7fe ff3d 	bl	80001fc <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e067      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d108      	bne.n	80013b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a6:	4b30      	ldr	r3, [pc, #192]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	492d      	ldr	r1, [pc, #180]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a19      	ldr	r1, [r3, #32]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	430b      	orrs	r3, r1
 80013ca:	4927      	ldr	r1, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x4fc>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7fe ff11 	bl	80001fc <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013de:	f7fe ff0d 	bl	80001fc <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e037      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x46a>
 80013fc:	e02f      	b.n	800145e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_RCC_OscConfig+0x4fc>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7fe fefa 	bl	80001fc <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7fe fef6 	bl	80001fc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e020      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x498>
 800142a:	e018      	b.n	800145e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e013      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	429a      	cmp	r2, r3
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	40007000 	.word	0x40007000
 8001470:	42420060 	.word	0x42420060

08001474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0d0      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0207 	bic.w	r2, r3, #7
 800149e:	4965      	ldr	r1, [pc, #404]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d040      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06b      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4936      	ldr	r1, [pc, #216]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7fe fe4a 	bl	80001fc <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7fe fe46 	bl	80001fc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e053      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d210      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4922      	ldr	r1, [pc, #136]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4601      	mov	r1, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	fa21 f303 	lsr.w	r3, r1, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1cc>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fda8 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	080025f0 	.word	0x080025f0
 8001640:	2000000c 	.word	0x2000000c
 8001644:	20000000 	.word	0x20000000

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b490      	push	{r4, r7}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001650:	1d3c      	adds	r4, r7, #4
 8001652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b04      	cmp	r3, #4
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x40>
 8001682:	2b08      	cmp	r3, #8
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x46>
 8001686:	e02d      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 800168a:	623b      	str	r3, [r7, #32]
      break;
 800168c:	e02d      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	0c9b      	lsrs	r3, r3, #18
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800169a:	4413      	add	r3, r2
 800169c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0c5b      	lsrs	r3, r3, #17
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ba:	4413      	add	r3, r2
 80016bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c6:	fb02 f203 	mul.w	r2, r2, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	e004      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	623b      	str	r3, [r7, #32]
      break;
 80016e2:	e002      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e6:	623b      	str	r3, [r7, #32]
      break;
 80016e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ea:	6a3b      	ldr	r3, [r7, #32]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc90      	pop	{r4, r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	080025dc 	.word	0x080025dc
 80016fc:	080025ec 	.word	0x080025ec
 8001700:	40021000 	.word	0x40021000
 8001704:	007a1200 	.word	0x007a1200
 8001708:	003d0900 	.word	0x003d0900

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_RCC_GetHCLKFreq+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	2000000c 	.word	0x2000000c

08001720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001724:	f7ff fff2 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001728:	4601      	mov	r1, r0
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	08002600 	.word	0x08002600

08001748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <RCC_Delay+0x34>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <RCC_Delay+0x38>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0a5b      	lsrs	r3, r3, #9
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001764:	bf00      	nop
  }
  while (Delay --);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	60fa      	str	r2, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <RCC_Delay+0x1c>
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000000c 	.word	0x2000000c
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e053      	b.n	800183e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fdd9 	bl	8002368 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2202      	movs	r2, #2
 80017ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	ea42 0103 	orr.w	r1, r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	0c1a      	lsrs	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f002 0204 	and.w	r2, r2, #4
 800181c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69da      	ldr	r2, [r3, #28]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b088      	sub	sp, #32
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4613      	mov	r3, r2
 8001854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_SPI_Transmit+0x22>
 8001864:	2302      	movs	r3, #2
 8001866:	e11e      	b.n	8001aa6 <HAL_SPI_Transmit+0x260>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001870:	f7fe fcc4 	bl	80001fc <HAL_GetTick>
 8001874:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d002      	beq.n	800188c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001886:	2302      	movs	r3, #2
 8001888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800188a:	e103      	b.n	8001a94 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_SPI_Transmit+0x52>
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800189c:	e0fa      	b.n	8001a94 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2203      	movs	r2, #3
 80018a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	88fa      	ldrh	r2, [r7, #6]
 80018bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e4:	d107      	bne.n	80018f6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b40      	cmp	r3, #64	; 0x40
 8001902:	d007      	beq.n	8001914 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800191c:	d14b      	bne.n	80019b6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_SPI_Transmit+0xe6>
 8001926:	8afb      	ldrh	r3, [r7, #22]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d13e      	bne.n	80019aa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	1c9a      	adds	r2, r3, #2
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001946:	b29b      	uxth	r3, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001950:	e02b      	b.n	80019aa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b02      	cmp	r3, #2
 800195e:	d112      	bne.n	8001986 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	881a      	ldrh	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	1c9a      	adds	r2, r3, #2
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	86da      	strh	r2, [r3, #54]	; 0x36
 8001984:	e011      	b.n	80019aa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001986:	f7fe fc39 	bl	80001fc <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d803      	bhi.n	800199e <HAL_SPI_Transmit+0x158>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d102      	bne.n	80019a4 <HAL_SPI_Transmit+0x15e>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019a8:	e074      	b.n	8001a94 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ce      	bne.n	8001952 <HAL_SPI_Transmit+0x10c>
 80019b4:	e04c      	b.n	8001a50 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_SPI_Transmit+0x17e>
 80019be:	8afb      	ldrh	r3, [r7, #22]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d140      	bne.n	8001a46 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	330c      	adds	r3, #12
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019ea:	e02c      	b.n	8001a46 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d113      	bne.n	8001a22 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	330c      	adds	r3, #12
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a20:	e011      	b.n	8001a46 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a22:	f7fe fbeb 	bl	80001fc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d803      	bhi.n	8001a3a <HAL_SPI_Transmit+0x1f4>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d102      	bne.n	8001a40 <HAL_SPI_Transmit+0x1fa>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a44:	e026      	b.n	8001a94 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1cd      	bne.n	80019ec <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f894 	bl	8001b82 <SPI_EndRxTxTransaction>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10a      	bne.n	8001a84 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
 8001a90:	e000      	b.n	8001a94 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001abe:	e04c      	b.n	8001b5a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d048      	beq.n	8001b5a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ac8:	f7fe fb98 	bl	80001fc <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d902      	bls.n	8001ade <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d13d      	bne.n	8001b5a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001af6:	d111      	bne.n	8001b1c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b00:	d004      	beq.n	8001b0c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0a:	d107      	bne.n	8001b1c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b24:	d10f      	bne.n	8001b46 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e00f      	b.n	8001b7a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4013      	ands	r3, r2
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1a3      	bne.n	8001ac0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af02      	add	r7, sp, #8
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff ff88 	bl	8001aae <SPI_WaitFlagStateUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <ILI9488_SPI_Send>:
volatile uint16_t LCD_HEIGHT = ILI9488_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9488_SCREEN_WIDTH;

/*Send data (char) to LCD*/
void ILI9488_SPI_Send(uint8_t SPI_Data)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	// TODO it needs to rewrite without HAL
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001bca:	1df9      	adds	r1, r7, #7
 8001bcc:	2301      	movs	r3, #1
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <ILI9488_SPI_Send+0x20>)
 8001bd2:	f7ff fe38 	bl	8001846 <HAL_SPI_Transmit>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000084 	.word	0x20000084

08001be4 <ILI9488_Write_Command>:

/* Send command (char) to LCD */
void ILI9488_Write_Command(uint8_t Command)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	480a      	ldr	r0, [pc, #40]	; (8001c1c <ILI9488_Write_Command+0x38>)
 8001bf4:	f7fe fd6c 	bl	80006d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <ILI9488_Write_Command+0x38>)
 8001bfe:	f7fe fd67 	bl	80006d0 <HAL_GPIO_WritePin>
	ILI9488_SPI_Send(Command);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ffdb 	bl	8001bc0 <ILI9488_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <ILI9488_Write_Command+0x38>)
 8001c10:	f7fe fd5e 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40010c00 	.word	0x40010c00

08001c20 <ILI9488_Write_Data>:

/* Send Data (char) to LCD */
void ILI9488_Write_Data(uint8_t Data)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <ILI9488_Write_Data+0x38>)
 8001c30:	f7fe fd4e 	bl	80006d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2108      	movs	r1, #8
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <ILI9488_Write_Data+0x38>)
 8001c3a:	f7fe fd49 	bl	80006d0 <HAL_GPIO_WritePin>
	ILI9488_SPI_Send(Data);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ffbd 	bl	8001bc0 <ILI9488_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <ILI9488_Write_Data+0x38>)
 8001c4c:	f7fe fd40 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40010c00 	.word	0x40010c00

08001c5c <ILI9488_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9488_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	80fb      	strh	r3, [r7, #6]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80bb      	strh	r3, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	807b      	strh	r3, [r7, #2]
 8001c76:	4613      	mov	r3, r2
 8001c78:	803b      	strh	r3, [r7, #0]
	ILI9488_Write_Command(0x2A);
 8001c7a:	202a      	movs	r0, #42	; 0x2a
 8001c7c:	f7ff ffb2 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(X1 >> 8);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ffc9 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(X1);
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ffc4 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(X2 >> 8);
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ffbd 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(X2);
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffb8 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x2B);
 8001cb0:	202b      	movs	r0, #43	; 0x2b
 8001cb2:	f7ff ff97 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(Y1 >> 8);
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffae 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(Y1);
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffa9 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(Y2 >> 8);
 8001cce:	883b      	ldrh	r3, [r7, #0]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ffa2 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(Y2);
 8001cdc:	883b      	ldrh	r3, [r7, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff9d 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x2C);
 8001ce6:	202c      	movs	r0, #44	; 0x2c
 8001ce8:	f7ff ff7c 	bl	8001be4 <ILI9488_Write_Command>
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <ILI9488_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9488_Set_Rotation(uint8_t Rotation)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t screen_rotation = Rotation;
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	73fb      	strb	r3, [r7, #15]
	ILI9488_Write_Command(0x36);
 8001d02:	2036      	movs	r0, #54	; 0x36
 8001d04:	f7ff ff6e 	bl	8001be4 <ILI9488_Write_Command>
	HAL_Delay(1);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7fe fa81 	bl	8000210 <HAL_Delay>
	switch(screen_rotation)
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d83b      	bhi.n	8001d8c <ILI9488_Set_Rotation+0x98>
 8001d14:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <ILI9488_Set_Rotation+0x28>)
 8001d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1a:	bf00      	nop
 8001d1c:	08001d2d 	.word	0x08001d2d
 8001d20:	08001d45 	.word	0x08001d45
 8001d24:	08001d5d 	.word	0x08001d5d
 8001d28:	08001d75 	.word	0x08001d75
	{
		case SCREEN_VERTICAL_1:
			ILI9488_Write_Data(0x40 | 0x08);
 8001d2c:	2048      	movs	r0, #72	; 0x48
 8001d2e:	f7ff ff77 	bl	8001c20 <ILI9488_Write_Data>
			LCD_WIDTH = ILI9488_SCREEN_HEIGHT;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <ILI9488_Set_Rotation+0xa4>)
 8001d34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d38:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_WIDTH;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <ILI9488_Set_Rotation+0xa8>)
 8001d3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d40:	801a      	strh	r2, [r3, #0]
			break;
 8001d42:	e024      	b.n	8001d8e <ILI9488_Set_Rotation+0x9a>
		case SCREEN_HORIZONTAL_1:
			ILI9488_Write_Data(0x20 | 0x08);
 8001d44:	2028      	movs	r0, #40	; 0x28
 8001d46:	f7ff ff6b 	bl	8001c20 <ILI9488_Write_Data>
			LCD_WIDTH  = ILI9488_SCREEN_WIDTH;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <ILI9488_Set_Rotation+0xa4>)
 8001d4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d50:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_HEIGHT;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <ILI9488_Set_Rotation+0xa8>)
 8001d54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d58:	801a      	strh	r2, [r3, #0]
			break;
 8001d5a:	e018      	b.n	8001d8e <ILI9488_Set_Rotation+0x9a>
		case SCREEN_VERTICAL_2:
			ILI9488_Write_Data(0x80 | 0x08);
 8001d5c:	2088      	movs	r0, #136	; 0x88
 8001d5e:	f7ff ff5f 	bl	8001c20 <ILI9488_Write_Data>
			LCD_WIDTH  = ILI9488_SCREEN_HEIGHT;
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <ILI9488_Set_Rotation+0xa4>)
 8001d64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d68:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_WIDTH;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <ILI9488_Set_Rotation+0xa8>)
 8001d6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d70:	801a      	strh	r2, [r3, #0]
			break;
 8001d72:	e00c      	b.n	8001d8e <ILI9488_Set_Rotation+0x9a>
		case SCREEN_HORIZONTAL_2:
			ILI9488_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8001d74:	20e8      	movs	r0, #232	; 0xe8
 8001d76:	f7ff ff53 	bl	8001c20 <ILI9488_Write_Data>
			LCD_WIDTH  = ILI9488_SCREEN_WIDTH;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <ILI9488_Set_Rotation+0xa4>)
 8001d7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d80:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9488_SCREEN_HEIGHT;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <ILI9488_Set_Rotation+0xa8>)
 8001d84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d88:	801a      	strh	r2, [r3, #0]
			break;
 8001d8a:	e000      	b.n	8001d8e <ILI9488_Set_Rotation+0x9a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001d8c:	bf00      	nop
	}
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000006 	.word	0x20000006

08001da0 <ILI9488_LedEnable>:

/*Enable LCD led*/
void ILI9488_LedEnable(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_LED_PORT, LCD_LED_PIN, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2120      	movs	r1, #32
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <ILI9488_LedEnable+0x14>)
 8001daa:	f7fe fc91 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40010c00 	.word	0x40010c00

08001db8 <init_ILI9488>:
{
	HAL_GPIO_WritePin(LCD_LED_PORT, LCD_LED_PIN, GPIO_PIN_RESET);
}

void init_ILI9488(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	ILI9488_Write_Command(0xE0);
 8001dbc:	20e0      	movs	r0, #224	; 0xe0
 8001dbe:	f7ff ff11 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff ff2c 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x03);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f7ff ff29 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x09);
 8001dce:	2009      	movs	r0, #9
 8001dd0:	f7ff ff26 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x08);
 8001dd4:	2008      	movs	r0, #8
 8001dd6:	f7ff ff23 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x16);
 8001dda:	2016      	movs	r0, #22
 8001ddc:	f7ff ff20 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0A);
 8001de0:	200a      	movs	r0, #10
 8001de2:	f7ff ff1d 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x3F);
 8001de6:	203f      	movs	r0, #63	; 0x3f
 8001de8:	f7ff ff1a 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x78);
 8001dec:	2078      	movs	r0, #120	; 0x78
 8001dee:	f7ff ff17 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x4C);
 8001df2:	204c      	movs	r0, #76	; 0x4c
 8001df4:	f7ff ff14 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x09);
 8001df8:	2009      	movs	r0, #9
 8001dfa:	f7ff ff11 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0A);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f7ff ff0e 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x08);
 8001e04:	2008      	movs	r0, #8
 8001e06:	f7ff ff0b 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x16);
 8001e0a:	2016      	movs	r0, #22
 8001e0c:	f7ff ff08 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x1A);
 8001e10:	201a      	movs	r0, #26
 8001e12:	f7ff ff05 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0F);
 8001e16:	200f      	movs	r0, #15
 8001e18:	f7ff ff02 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0XE1);
 8001e1c:	20e1      	movs	r0, #225	; 0xe1
 8001e1e:	f7ff fee1 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fefc 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x16);
 8001e28:	2016      	movs	r0, #22
 8001e2a:	f7ff fef9 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x19);
 8001e2e:	2019      	movs	r0, #25
 8001e30:	f7ff fef6 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x03);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f7ff fef3 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0F);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f7ff fef0 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x05);
 8001e40:	2005      	movs	r0, #5
 8001e42:	f7ff feed 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x32);
 8001e46:	2032      	movs	r0, #50	; 0x32
 8001e48:	f7ff feea 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x45);
 8001e4c:	2045      	movs	r0, #69	; 0x45
 8001e4e:	f7ff fee7 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x46);
 8001e52:	2046      	movs	r0, #70	; 0x46
 8001e54:	f7ff fee4 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x04);
 8001e58:	2004      	movs	r0, #4
 8001e5a:	f7ff fee1 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0E);
 8001e5e:	200e      	movs	r0, #14
 8001e60:	f7ff fede 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0D);
 8001e64:	200d      	movs	r0, #13
 8001e66:	f7ff fedb 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x35);
 8001e6a:	2035      	movs	r0, #53	; 0x35
 8001e6c:	f7ff fed8 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x37);
 8001e70:	2037      	movs	r0, #55	; 0x37
 8001e72:	f7ff fed5 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0F);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff fed2 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xC0);      //Power Control 1
 8001e7c:	20c0      	movs	r0, #192	; 0xc0
 8001e7e:	f7ff feb1 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x17);    //Vreg1out
 8001e82:	2017      	movs	r0, #23
 8001e84:	f7ff fecc 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x15);    //Verg2out
 8001e88:	2015      	movs	r0, #21
 8001e8a:	f7ff fec9 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xC1);      //Power Control 2
 8001e8e:	20c1      	movs	r0, #193	; 0xc1
 8001e90:	f7ff fea8 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x41);    //VGH,VGL
 8001e94:	2041      	movs	r0, #65	; 0x41
 8001e96:	f7ff fec3 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xC5);      //Power Control 3
 8001e9a:	20c5      	movs	r0, #197	; 0xc5
 8001e9c:	f7ff fea2 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff febd 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x12);    //Vcom
 8001ea6:	2012      	movs	r0, #18
 8001ea8:	f7ff feba 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x80);
 8001eac:	2080      	movs	r0, #128	; 0x80
 8001eae:	f7ff feb7 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x36);      //Memory Access
 8001eb2:	2036      	movs	r0, #54	; 0x36
 8001eb4:	f7ff fe96 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x48);
 8001eb8:	2048      	movs	r0, #72	; 0x48
 8001eba:	f7ff feb1 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x3A);      // Interface Pixel Format
 8001ebe:	203a      	movs	r0, #58	; 0x3a
 8001ec0:	f7ff fe90 	bl	8001be4 <ILI9488_Write_Command>
	//ILI9488_Write_Data(0x66); 	  //18 bit
	ILI9488_Write_Data(0x71); 	  	  //3 bit
 8001ec4:	2071      	movs	r0, #113	; 0x71
 8001ec6:	f7ff feab 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB0);      // Interface Mode Control
 8001eca:	20b0      	movs	r0, #176	; 0xb0
 8001ecc:	f7ff fe8a 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x80);     			 //SDO NOT USE
 8001ed0:	2080      	movs	r0, #128	; 0x80
 8001ed2:	f7ff fea5 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB1);      //Frame rate
 8001ed6:	20b1      	movs	r0, #177	; 0xb1
 8001ed8:	f7ff fe84 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0xA0);    //60Hz
 8001edc:	20a0      	movs	r0, #160	; 0xa0
 8001ede:	f7ff fe9f 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB4);      //Display Inversion Control
 8001ee2:	20b4      	movs	r0, #180	; 0xb4
 8001ee4:	f7ff fe7e 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x02);    //2-dot
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7ff fe99 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB6);      //Display Function Control  RGB/MCU Interface Control
 8001eee:	20b6      	movs	r0, #182	; 0xb6
 8001ef0:	f7ff fe78 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x02);    //MCU
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff fe93 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x02);    //Source,Gate scan dieection
 8001efa:	2002      	movs	r0, #2
 8001efc:	f7ff fe90 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xE9);      // Set Image Functio
 8001f00:	20e9      	movs	r0, #233	; 0xe9
 8001f02:	f7ff fe6f 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);    // Disable 24 bit data
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fe8a 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xF7);      // Adjust Control
 8001f0c:	20f7      	movs	r0, #247	; 0xf7
 8001f0e:	f7ff fe69 	bl	8001be4 <ILI9488_Write_Command>
	ILI9488_Write_Data(0xA9);
 8001f12:	20a9      	movs	r0, #169	; 0xa9
 8001f14:	f7ff fe84 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x51);
 8001f18:	2051      	movs	r0, #81	; 0x51
 8001f1a:	f7ff fe81 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x2C);
 8001f1e:	202c      	movs	r0, #44	; 0x2c
 8001f20:	f7ff fe7e 	bl	8001c20 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x82);    // D7 stream, loose
 8001f24:	2082      	movs	r0, #130	; 0x82
 8001f26:	f7ff fe7b 	bl	8001c20 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x11);    //Exit Sleep
 8001f2a:	2011      	movs	r0, #17
 8001f2c:	f7ff fe5a 	bl	8001be4 <ILI9488_Write_Command>
	HAL_Delay(120);
 8001f30:	2078      	movs	r0, #120	; 0x78
 8001f32:	f7fe f96d 	bl	8000210 <HAL_Delay>
	ILI9488_Write_Command(0x29);    //Display on
 8001f36:	2029      	movs	r0, #41	; 0x29
 8001f38:	f7ff fe54 	bl	8001be4 <ILI9488_Write_Command>
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <ILI9488_Init>:

/*Initialize LCD display*/
void ILI9488_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	init_ILI9488();
 8001f44:	f7ff ff38 	bl	8001db8 <init_ILI9488>
	HAL_Delay(500);
 8001f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4c:	f7fe f960 	bl	8000210 <HAL_Delay>
	ILI9488_Set_Rotation(SCREEN_VERTICAL_1);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff fecf 	bl	8001cf4 <ILI9488_Set_Rotation>
	ILI9488_LedEnable();
 8001f56:	f7ff ff23 	bl	8001da0 <ILI9488_LedEnable>
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint8_t Colour)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	80bb      	strh	r3, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	70fb      	strb	r3, [r7, #3]
	ILI9488_Set_Address(X, Y, X + 1, Y + 1);
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	3301      	adds	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	88b9      	ldrh	r1, [r7, #4]
 8001f80:	88f8      	ldrh	r0, [r7, #6]
 8001f82:	f7ff fe6b 	bl	8001c5c <ILI9488_Set_Address>
	HAL_Delay(1000);
 8001f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f8a:	f7fe f941 	bl	8000210 <HAL_Delay>
	//*
	//COLOUR
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2110      	movs	r1, #16
 8001f92:	4811      	ldr	r0, [pc, #68]	; (8001fd8 <ILI9341_Draw_Pixel+0x78>)
 8001f94:	f7fe fb9c 	bl	80006d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <ILI9341_Draw_Pixel+0x78>)
 8001f9e:	f7fe fb97 	bl	80006d0 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 0xFFFF; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	81fb      	strh	r3, [r7, #14]
 8001fa6:	e009      	b.n	8001fbc <ILI9341_Draw_Pixel+0x5c>
		ILI9488_SPI_Send(0x80 | Colour);
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe05 	bl	8001bc0 <ILI9488_SPI_Send>
	for(uint16_t i = 0; i < 0xFFFF; i++)
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	81fb      	strh	r3, [r7, #14]
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d1f0      	bne.n	8001fa8 <ILI9341_Draw_Pixel+0x48>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2108      	movs	r1, #8
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <ILI9341_Draw_Pixel+0x78>)
 8001fcc:	f7fe fb80 	bl	80006d0 <HAL_GPIO_WritePin>
	//*/
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40010c00 	.word	0x40010c00

08001fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <MX_GPIO_Init+0xd0>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	; (80020ac <MX_GPIO_Init+0xd0>)
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <MX_GPIO_Init+0xd0>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <MX_GPIO_Init+0xd0>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a27      	ldr	r2, [pc, #156]	; (80020ac <MX_GPIO_Init+0xd0>)
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <MX_GPIO_Init+0xd0>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <MX_GPIO_Init+0xd0>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a21      	ldr	r2, [pc, #132]	; (80020ac <MX_GPIO_Init+0xd0>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <MX_GPIO_Init+0xd0>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_Pin|LED_BLUE_Pin|DISPLAY_CS_Pin|DISPLAY_DC_RS_Pin 
 8002038:	2200      	movs	r2, #0
 800203a:	213e      	movs	r1, #62	; 0x3e
 800203c:	481c      	ldr	r0, [pc, #112]	; (80020b0 <MX_GPIO_Init+0xd4>)
 800203e:	f7fe fb47 	bl	80006d0 <HAL_GPIO_WritePin>
                          |DISPLAY_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POW_HEAD_GPIO_Port, POW_HEAD_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002048:	481a      	ldr	r0, [pc, #104]	; (80020b4 <MX_GPIO_Init+0xd8>)
 800204a:	f7fe fb41 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_Pin|LED_BLUE_Pin;
 800204e:	2306      	movs	r3, #6
 8002050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2302      	movs	r3, #2
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4619      	mov	r1, r3
 8002064:	4812      	ldr	r0, [pc, #72]	; (80020b0 <MX_GPIO_Init+0xd4>)
 8002066:	f7fe f9d9 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POW_HEAD_Pin;
 800206a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800206e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2302      	movs	r3, #2
 800207a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POW_HEAD_GPIO_Port, &GPIO_InitStruct);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4619      	mov	r1, r3
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <MX_GPIO_Init+0xd8>)
 8002084:	f7fe f9ca 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_DC_RS_Pin|DISPLAY_LED_Pin;
 8002088:	2338      	movs	r3, #56	; 0x38
 800208a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4804      	ldr	r0, [pc, #16]	; (80020b0 <MX_GPIO_Init+0xd4>)
 80020a0:	f7fe f9bc 	bl	800041c <HAL_GPIO_Init>

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40010800 	.word	0x40010800

080020b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_I2C1_Init+0x50>)
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <MX_I2C1_Init+0x54>)
 80020c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_I2C1_Init+0x50>)
 80020c4:	4a12      	ldr	r2, [pc, #72]	; (8002110 <MX_I2C1_Init+0x58>)
 80020c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_I2C1_Init+0x50>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_I2C1_Init+0x50>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_I2C1_Init+0x50>)
 80020d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <MX_I2C1_Init+0x50>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_I2C1_Init+0x50>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <MX_I2C1_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_I2C1_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_I2C1_Init+0x50>)
 80020f6:	f7fe fb1b 	bl	8000730 <HAL_I2C_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002100:	f000 f8f5 	bl	80022ee <Error_Handler>
  }

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000030 	.word	0x20000030
 800210c:	40005400 	.word	0x40005400
 8002110:	000186a0 	.word	0x000186a0

08002114 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_I2C_MspInit+0x70>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d123      	bne.n	800217c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_I2C_MspInit+0x74>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214c:	23c0      	movs	r3, #192	; 0xc0
 800214e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002150:	2312      	movs	r3, #18
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <HAL_I2C_MspInit+0x78>)
 8002160:	f7fe f95c 	bl	800041c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_I2C_MspInit+0x74>)
 800216a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216e:	61d3      	str	r3, [r2, #28]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40005400 	.word	0x40005400
 8002188:	40021000 	.word	0x40021000
 800218c:	40010c00 	.word	0x40010c00

08002190 <init_amplifier>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init_amplifier()
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
	  HAL_Delay(1000);
 8002196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800219a:	f7fe f839 	bl	8000210 <HAL_Delay>
	  //HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
	  HAL_Delay(2000);
 800219e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021a2:	f7fe f835 	bl	8000210 <HAL_Delay>
	  uint8_t data[9];
	  data[0] = 0x10; 		// start subaddress and auto increment mode
 80021a6:	2310      	movs	r3, #16
 80021a8:	713b      	strb	r3, [r7, #4]
	  data[1] = 0b11; 		// multiplexer
 80021aa:	2303      	movs	r3, #3
 80021ac:	717b      	strb	r3, [r7, #5]
	  data[2] = 0b0000;		// input gain
 80021ae:	2300      	movs	r3, #0
 80021b0:	71bb      	strb	r3, [r7, #6]
	  data[3] = 0b0000; 	// volume
 80021b2:	2300      	movs	r3, #0
 80021b4:	71fb      	strb	r3, [r7, #7]
	  data[4] = 0b1101; 	// bass (0b0000 to 0b0111 to 0b1000)
 80021b6:	230d      	movs	r3, #13
 80021b8:	723b      	strb	r3, [r7, #8]
	  data[5] = 0b0000; 	// mid-range (0b0000 to 0b0111 to 0b1000)
 80021ba:	2300      	movs	r3, #0
 80021bc:	727b      	strb	r3, [r7, #9]
	  data[6] = 0b1000; 	// treble (0b0000 to 0b01111 to 0b1000)
 80021be:	2308      	movs	r3, #8
 80021c0:	72bb      	strb	r3, [r7, #10]
	  data[7] = 0b0000000;	// first speaker attenuation
 80021c2:	2300      	movs	r3, #0
 80021c4:	72fb      	strb	r3, [r7, #11]
	  data[8] = 0b0000000;	// second speaker attenuation
 80021c6:	2300      	movs	r3, #0
 80021c8:	733b      	strb	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(&hi2c1, 0x0088, data, 9, 1000);
 80021ca:	1d3a      	adds	r2, r7, #4
 80021cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2309      	movs	r3, #9
 80021d4:	2188      	movs	r1, #136	; 0x88
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <init_amplifier+0x54>)
 80021d8:	f7fe fbd2 	bl	8000980 <HAL_I2C_Master_Transmit>
	  //HAL_GPIO_WritePin(POW_HEAD_GPIO_Port, POW_HEAD_Pin, GPIO_PIN_SET);
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000030 	.word	0x20000030

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ee:	f7fd ffad 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f2:	f000 f837 	bl	8002264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f6:	f7ff fef1 	bl	8001fdc <MX_GPIO_Init>
  MX_I2C1_Init();
 80021fa:	f7ff ff5d 	bl	80020b8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80021fe:	f000 f87d 	bl	80022fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8002202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002206:	f7fe f803 	bl	8000210 <HAL_Delay>
  init_amplifier();
 800220a:	f7ff ffc1 	bl	8002190 <init_amplifier>
  // ===
  ILI9488_Init();//initial driver setup to drive ili9488
 800220e:	f7ff fe97 	bl	8001f40 <ILI9488_Init>
  HAL_Delay(500);
 8002212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002216:	f7fd fffb 	bl	8000210 <HAL_Delay>

  //ILI9341_Draw_Pixel(100, 100, BLUE);
  ///*
  for(uint16_t i = 0; i < 0xFFFF; i++)
 800221a:	2300      	movs	r3, #0
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	e011      	b.n	8002244 <main+0x5c>
  {
	  //ILI9488_Fill_Screen(i & 0x07);
	  // ===
	  ILI9341_Draw_Pixel(12, 12, ILI9488_CYAN);
 8002220:	2203      	movs	r2, #3
 8002222:	210c      	movs	r1, #12
 8002224:	200c      	movs	r0, #12
 8002226:	f7ff fe9b 	bl	8001f60 <ILI9341_Draw_Pixel>
	  ILI9341_Draw_Pixel(102, 102, ILI9488_CYAN);
 800222a:	2203      	movs	r2, #3
 800222c:	2166      	movs	r1, #102	; 0x66
 800222e:	2066      	movs	r0, #102	; 0x66
 8002230:	f7ff fe96 	bl	8001f60 <ILI9341_Draw_Pixel>
	  ILI9341_Draw_Pixel(202, 202, ILI9488_CYAN);
 8002234:	2203      	movs	r2, #3
 8002236:	21ca      	movs	r1, #202	; 0xca
 8002238:	20ca      	movs	r0, #202	; 0xca
 800223a:	f7ff fe91 	bl	8001f60 <ILI9341_Draw_Pixel>
  for(uint16_t i = 0; i < 0xFFFF; i++)
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	3301      	adds	r3, #1
 8002242:	80fb      	strh	r3, [r7, #6]
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	4293      	cmp	r3, r2
 800224c:	d1e8      	bne.n	8002220 <main+0x38>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800224e:	2104      	movs	r1, #4
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <main+0x78>)
 8002252:	f7fe fa55 	bl	8000700 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8002256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800225a:	f7fd ffd9 	bl	8000210 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800225e:	e7f6      	b.n	800224e <main+0x66>
 8002260:	40010c00 	.word	0x40010c00

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b090      	sub	sp, #64	; 0x40
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	2228      	movs	r2, #40	; 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f99e 	bl	80025b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002286:	2301      	movs	r3, #1
 8002288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800228a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002294:	2301      	movs	r3, #1
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002298:	2302      	movs	r3, #2
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fe61 	bl	8000f74 <HAL_RCC_OscConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022b8:	f000 f819 	bl	80022ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022bc:	230f      	movs	r3, #15
 80022be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c0:	2302      	movs	r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f8cc 	bl	8001474 <HAL_RCC_ClockConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022e2:	f000 f804 	bl	80022ee <Error_Handler>
  }
}
 80022e6:	bf00      	nop
 80022e8:	3740      	adds	r7, #64	; 0x40
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
	...

080022fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <MX_SPI2_Init+0x64>)
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <MX_SPI2_Init+0x68>)
 8002304:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <MX_SPI2_Init+0x64>)
 8002308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800230c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <MX_SPI2_Init+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <MX_SPI2_Init+0x64>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_SPI2_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_SPI2_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_SPI2_Init+0x64>)
 8002328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_SPI2_Init+0x64>)
 8002330:	2200      	movs	r2, #0
 8002332:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <MX_SPI2_Init+0x64>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_SPI2_Init+0x64>)
 800233c:	2200      	movs	r2, #0
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <MX_SPI2_Init+0x64>)
 8002342:	2200      	movs	r2, #0
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_SPI2_Init+0x64>)
 8002348:	220a      	movs	r2, #10
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <MX_SPI2_Init+0x64>)
 800234e:	f7ff fa19 	bl	8001784 <HAL_SPI_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002358:	f7ff ffc9 	bl	80022ee <Error_Handler>
  }

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000084 	.word	0x20000084
 8002364:	40003800 	.word	0x40003800

08002368 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <HAL_SPI_MspInit+0x8c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d131      	bne.n	80023ec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_SPI_MspInit+0x90>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <HAL_SPI_MspInit+0x90>)
 800238e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_SPI_MspInit+0x90>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_SPI_MspInit+0x90>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <HAL_SPI_MspInit+0x90>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_SPI_MspInit+0x90>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80023b8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80023bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	4619      	mov	r1, r3
 80023cc:	480b      	ldr	r0, [pc, #44]	; (80023fc <HAL_SPI_MspInit+0x94>)
 80023ce:	f7fe f825 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80023d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	4619      	mov	r1, r3
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <HAL_SPI_MspInit+0x94>)
 80023e8:	f7fe f818 	bl	800041c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023ec:	bf00      	nop
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40003800 	.word	0x40003800
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40010c00 	.word	0x40010c00

08002400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_MspInit+0x5c>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6193      	str	r3, [r2, #24]
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_MspInit+0x5c>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_MspInit+0x5c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_MspInit+0x5c>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_MspInit+0x5c>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_MspInit+0x60>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_MspInit+0x60>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000

08002464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <HardFault_Handler+0x4>

08002476 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <MemManage_Handler+0x4>

0800247c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <BusFault_Handler+0x4>

08002482 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <UsageFault_Handler+0x4>

08002488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b0:	f7fd fe92 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <SystemInit+0x5c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <SystemInit+0x5c>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <SystemInit+0x5c>)
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4911      	ldr	r1, [pc, #68]	; (8002514 <SystemInit+0x5c>)
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <SystemInit+0x60>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <SystemInit+0x5c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <SystemInit+0x5c>)
 80024da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <SystemInit+0x5c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <SystemInit+0x5c>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <SystemInit+0x5c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a07      	ldr	r2, [pc, #28]	; (8002514 <SystemInit+0x5c>)
 80024f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <SystemInit+0x5c>)
 80024fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002502:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SystemInit+0x64>)
 8002506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800250a:	609a      	str	r2, [r3, #8]
#endif 
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40021000 	.word	0x40021000
 8002518:	f8ff0000 	.word	0xf8ff0000
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002520:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002522:	e003      	b.n	800252c <LoopCopyDataInit>

08002524 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002526:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002528:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800252a:	3104      	adds	r1, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800252c:	480a      	ldr	r0, [pc, #40]	; (8002558 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002530:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002532:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002534:	d3f6      	bcc.n	8002524 <CopyDataInit>
  ldr r2, =_sbss
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002538:	e002      	b.n	8002540 <LoopFillZerobss>

0800253a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800253c:	f842 3b04 	str.w	r3, [r2], #4

08002540 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002542:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002544:	d3f9      	bcc.n	800253a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002546:	f7ff ffb7 	bl	80024b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254a:	f000 f80f 	bl	800256c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254e:	f7ff fe4b 	bl	80021e8 <main>
  bx lr
 8002552:	4770      	bx	lr
  ldr r3, =_sidata
 8002554:	08002610 	.word	0x08002610
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800255c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002560:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002564:	200000dc 	.word	0x200000dc

08002568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC1_2_IRQHandler>
	...

0800256c <__libc_init_array>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	2500      	movs	r5, #0
 8002570:	4e0c      	ldr	r6, [pc, #48]	; (80025a4 <__libc_init_array+0x38>)
 8002572:	4c0d      	ldr	r4, [pc, #52]	; (80025a8 <__libc_init_array+0x3c>)
 8002574:	1ba4      	subs	r4, r4, r6
 8002576:	10a4      	asrs	r4, r4, #2
 8002578:	42a5      	cmp	r5, r4
 800257a:	d109      	bne.n	8002590 <__libc_init_array+0x24>
 800257c:	f000 f822 	bl	80025c4 <_init>
 8002580:	2500      	movs	r5, #0
 8002582:	4e0a      	ldr	r6, [pc, #40]	; (80025ac <__libc_init_array+0x40>)
 8002584:	4c0a      	ldr	r4, [pc, #40]	; (80025b0 <__libc_init_array+0x44>)
 8002586:	1ba4      	subs	r4, r4, r6
 8002588:	10a4      	asrs	r4, r4, #2
 800258a:	42a5      	cmp	r5, r4
 800258c:	d105      	bne.n	800259a <__libc_init_array+0x2e>
 800258e:	bd70      	pop	{r4, r5, r6, pc}
 8002590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002594:	4798      	blx	r3
 8002596:	3501      	adds	r5, #1
 8002598:	e7ee      	b.n	8002578 <__libc_init_array+0xc>
 800259a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800259e:	4798      	blx	r3
 80025a0:	3501      	adds	r5, #1
 80025a2:	e7f2      	b.n	800258a <__libc_init_array+0x1e>
 80025a4:	08002608 	.word	0x08002608
 80025a8:	08002608 	.word	0x08002608
 80025ac:	08002608 	.word	0x08002608
 80025b0:	0800260c 	.word	0x0800260c

080025b4 <memset>:
 80025b4:	4603      	mov	r3, r0
 80025b6:	4402      	add	r2, r0
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d100      	bne.n	80025be <memset+0xa>
 80025bc:	4770      	bx	lr
 80025be:	f803 1b01 	strb.w	r1, [r3], #1
 80025c2:	e7f9      	b.n	80025b8 <memset+0x4>

080025c4 <_init>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	bf00      	nop
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr

080025d0 <_fini>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	bf00      	nop
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr
